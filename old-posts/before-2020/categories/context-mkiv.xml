<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title># rm -rf / (关于文章 ConTeXt MkIV)</title><link>/</link><description></description><atom:link href="/categories/context-mkiv.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2020 &lt;a href="mailto:lyr.m2@live.cn"&gt;Garfileo&lt;/a&gt; </copyright><lastBuildDate>Thu, 19 Nov 2020 08:41:06 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>蜗牛</title><link>/posts/snail.html</link><dc:creator>Garfileo</dc:creator><description>&lt;div&gt;&lt;p&gt;最近用 MetaFun &lt;sup&gt;[1]&lt;/sup&gt; 制作了一个小模块 &lt;a href="https://github.com/liyanrui/snail/blob/master/snail.mp"&gt;snail.mp&lt;/a&gt; &lt;sup&gt;[2]&lt;/sup&gt; ，用于绘制矢量图格式的简单流程图。&lt;/p&gt;
&lt;p&gt;此事纯属无心之举。原本是要用 awk 写一个能够自动编排文档中的参考文献和注释的工具。在酝酿情绪的过程中，打算用 MetaFun 画一幅简单的示意图。在绘图过程中，因不断嫌弃所用代码的繁琐，最终有了十余行简短的绘图代码以及能够让这些代码工作的一个小模块。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/snail/01.png"&gt;&lt;/p&gt;
&lt;p&gt;我将这个模块命名为 Snail（蜗牛）。之所以如此命名，一方面是因为以语言描述的方式绘制流程图，效率太低了；另一方面，绘图过程也的确像蜗牛的爬动。&lt;/p&gt;
&lt;h2&gt;简单的例子&lt;/h2&gt;
&lt;p&gt;为求和运算 1 + 2 + 3 + ... + 100 绘制流程图，以此建立对 Snail 的喜欢、讨厌或者不以为然的初步印象。&lt;/p&gt;
&lt;p&gt;首先应该用铅笔在纸上绘制草图。不过，我没找到铅笔，好不容易找到了一支中性笔客串一番。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/snail/02.png"&gt;&lt;/p&gt;
&lt;p&gt;基于以上草图，用 Snail 绘制流程图，结果为&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/snail/03.png"&gt;&lt;/p&gt;
&lt;p&gt;所用的绘图代码为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;\usemodule[zhfonts]&lt;/span&gt;
&lt;span class="x"&gt;\defineframed&lt;/span&gt;
&lt;span class="x"&gt;  [SnailBox]&lt;/span&gt;
&lt;span class="x"&gt;  [frame=off, width=6cm, autowidth=force,&lt;/span&gt;
&lt;span class="x"&gt;    align=&lt;/span&gt;&lt;span class="cp"&gt;{&lt;/span&gt;&lt;span class="nf"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lohi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="na"&gt;broad&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="x"&gt;, offset=overlay]&lt;/span&gt;

&lt;span class="x"&gt;\startMPpage&lt;/span&gt;
&lt;span class="x"&gt;input snail;&lt;/span&gt;
&lt;span class="x"&gt;Node a, b, c, d, e;&lt;/span&gt;
&lt;span class="x"&gt;a := io("\SnailBox&lt;/span&gt;&lt;span class="cp"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="na"&gt;leftarrow&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;$\\&lt;/span&gt;&lt;span class="nv"&gt;$s&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="na"&gt;leftarrow&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="x"&gt;");&lt;/span&gt;
&lt;span class="x"&gt;b := proc("$s\leftarrow s + i$");&lt;/span&gt;
&lt;span class="x"&gt;c := other("$i &amp;gt; 100$", diamond(b));&lt;/span&gt;
&lt;span class="x"&gt;d := proc("$i\leftarrow i + 1$");&lt;/span&gt;
&lt;span class="x"&gt;e := io("\SnailBox&lt;/span&gt;&lt;span class="cp"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$s&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="x"&gt;");&lt;/span&gt;
&lt;span class="x"&gt;as_planet(b, a, "bottom"); as_planet(c, b, "bottom");&lt;/span&gt;
&lt;span class="x"&gt;as_planet(d, c, "right"); as_star(e, c, "bottom");&lt;/span&gt;
&lt;span class="x"&gt;draw_each a, b, c, d, e;&lt;/span&gt;

&lt;span class="x"&gt;enrich_each a, b, d, e;&lt;/span&gt;
&lt;span class="x"&gt;flow_each a =&amp;gt; b, b =&amp;gt; c, walk(d.N, (_n_ _v_(d.N, b.E)), b.E);&lt;/span&gt;
&lt;span class="x"&gt;tagged_flow("是", "right", .4) c =&amp;gt; e;&lt;/span&gt;
&lt;span class="x"&gt;tagged_flow("否", "top", .4) c =&amp;gt; d;&lt;/span&gt;
&lt;span class="x"&gt;\stopMPpage&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;绘图环境&lt;/h2&gt;
&lt;p&gt;使用 Snail 模块绘制流程图，需要将绘图代码嵌入 ConTeXt 文档：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% 导言区：对 ConTeXt 排版功能予以全局设定&lt;/span&gt;
&lt;span class="c"&gt;%&lt;/span&gt;
&lt;span class="c"&gt;%&lt;/span&gt;
&lt;span class="k"&gt;\startMPpage&lt;/span&gt;
input snail; 
&lt;span class="c"&gt;% 用于绘制流程图的代码&lt;/span&gt;
&lt;span class="c"&gt;%&lt;/span&gt;
&lt;span class="c"&gt;%&lt;/span&gt;
&lt;span class="k"&gt;\stopMPpage&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;若基于 zhfonts 模块 &lt;sup&gt;[3]&lt;/sup&gt; 实现中文支持，只需在导言区添加 &lt;code&gt;\usemodule[zhfonts]&lt;/code&gt;，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\usemodule&lt;/span&gt;&lt;span class="na"&gt;[zhfonts]&lt;/span&gt;
&lt;span class="k"&gt;\startMPpage&lt;/span&gt;
input snail;
&lt;span class="c"&gt;% 用于绘制流程图的代码&lt;/span&gt;
&lt;span class="c"&gt;%&lt;/span&gt;
&lt;span class="c"&gt;%&lt;/span&gt;
&lt;span class="k"&gt;\stopMPpage&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;若将上一节给出的绘图代码保存为 foo.tex 文件，使用 &lt;code&gt;context&lt;/code&gt; 命令便可将其编译为图形文件 foo.pdf，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; context foo.tex
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;context&lt;/code&gt; 命令隐含了许多细节。在 ConTeXt MkIV 环境里，这个命令会将 foo.tex 文档交由 TeX 引擎 LuaTeX 处理，最后生成 PDF 格式文件 foo.pdf。foo.tex 所包含的 MetaPost 代码由嵌入在 LuaTeX 中的 MPLIB 转化为 PDF 格式的图形文件，然后再由 LuaTeX 将图形文件嵌入 foo.pdf。这一过程，使用 Snail 可将其描绘为&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/snail/04.png"&gt;&lt;/p&gt;
&lt;h2&gt;结点&lt;/h2&gt;
&lt;p&gt;一幅流程图由结点、结点间的连线以及连线上的标注等元素构成。在 Snail 看来，结点只有两类，一类是 I/O（输入/输出）结点，另一类是过程（Procedure）结点。在 Snail 的默认绘图设定中，I/O 结点是无边框的文本，而过程结点是有边框的文本。&lt;/p&gt;
&lt;p&gt;Snail 模块的 &lt;code&gt;io&lt;/code&gt; 宏用于构造 I/O 结点，只需将 I/O 结点的内容以字串的形式作为参数传给 &lt;code&gt;io&lt;/code&gt; 宏，例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Node a;
a := io("I/O 结点的内容");
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/05.png"&gt;&lt;/p&gt;
&lt;p&gt;I/O 结点的文本颜色默认为黑色，若让它呈彩色，例如深绿色，只需&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Node a;
a := io("I/O 结点的内容") withcolor darkgreen;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/06.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;proc&lt;/code&gt; 宏用于构造过程结点。它会根据过程结点的文本自适应确定一个矩形边框，文本到边框的距离（留白）默认是 12 bp，约为 4.233 mm。例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Node d; d := proc("\CONTEXT");
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/07.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;proc&lt;/code&gt; 也能像 &lt;code&gt;io&lt;/code&gt; 宏那样通过 &lt;code&gt;withcoloor&lt;/code&gt; 语句修改结点文本的颜色。&lt;/p&gt;
&lt;p&gt;人只是人，人际关系却多变。数据只是数据，过程亦却多变。对于流程图而言，过程的多变对应的不过是过程结点的形状和颜色的变化而已。以矩形为边框的过程结点可用于表示一般的过程。其他形式的过程，其结点可通过 &lt;code&gt;other&lt;/code&gt; 宏构造，例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Node b, c, d; string d.txt;
b := other("\CONTEXT", fullsquare xysized (3cm, 1.5cm));
c := other("\METAPOST", ellipse(like b)) withcolor darkblue;
d.txt := "蜗牛爬得快吗？"; d := proc(d.txt);
d := other(d.txt, diamond(like d));
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/08.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt; 的边框是长 3 cm、宽 1.5 cm 的矩形。&lt;code&gt;c&lt;/code&gt; 的边框是椭圆。在默认情况下，&lt;code&gt;c&lt;/code&gt; 边框的长轴与短轴的尺寸分别是 &lt;code&gt;b&lt;/code&gt; 的边框长度和宽度的 1.25 倍。&lt;code&gt;like&lt;/code&gt; 是 Snail 的宏，其作用是根据基于给定图形的最小包围盒确定一个矩形，因而 &lt;code&gt;eillpse(like b)&lt;/code&gt; 的含义是基于像 &lt;code&gt;b&lt;/code&gt; 的包围盒那样的矩形构造椭圆。同理，&lt;code&gt;diamond(like d)&lt;/code&gt; 的含义是基于像 &lt;code&gt;d&lt;/code&gt; 的包围盒那样的矩形构造菱形，只不过在上述代码中，先构造了普通的过程结点 &lt;code&gt;d&lt;/code&gt;，然后基于它的边框构造菱形，再将新构造的结点赋予 &lt;code&gt;d&lt;/code&gt; 这个变量，从而实现了 &lt;code&gt;d&lt;/code&gt; 由普通过程结点向菱形过程结点的「进化」。注意，上述代码也展现了 &lt;code&gt;other&lt;/code&gt; 宏可以像 &lt;code&gt;io&lt;/code&gt; 和 &lt;code&gt;proc&lt;/code&gt; 那样以 &lt;code&gt;withcolor&lt;/code&gt; 语句设置结点文本的颜色。&lt;/p&gt;
&lt;p&gt;无论是 I/O 结点还是过程结点，其类型皆为 &lt;code&gt;Node&lt;/code&gt;，该类型是 Snail 为 MetaPost 的 &lt;code&gt;picture&lt;/code&gt; 类型而取的「别名」。因此，I/O 结点与过程结点可直接用 MetaPost 的 &lt;code&gt;draw&lt;/code&gt; 命令绘制出来，例如：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;draw a; draw b; draw c; draw d;
&lt;/pre&gt;


&lt;p&gt;Snail 的 &lt;code&gt;draw_each&lt;/code&gt; 可将一组结点绘制出来，利用这个宏可避免重复输入 &lt;code&gt;draw&lt;/code&gt; 命令，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;draw_each a, b, c, d;
&lt;/pre&gt;


&lt;p&gt;上述两条绘图语句等价。不过，Snail 所构造的结点，皆以坐标原点为中心，因此上述两条语句绘制的结果是一组堆叠起来图形：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/snail/09.png"&gt;&lt;/p&gt;
&lt;p&gt;因此，结点的绘制必须在流程图中的具体位置确定之后方可进行。&lt;/p&gt;
&lt;h2&gt;恒星与行星&lt;/h2&gt;
&lt;p&gt;可直接使用 MetaPost 的平移变换命令 &lt;code&gt;shifted&lt;/code&gt; 对结点进行定位。例如，对于上一节定义的四个结点，采用以下语句进行绘制：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;draw_each a, b shifted (5cm, 0), c shifted (0, 2.5cm), d shifted (5cm, 2.5cm);
&lt;/pre&gt;


&lt;p&gt;结果为：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/snail/10.png"&gt;&lt;/p&gt;
&lt;p&gt;采用平移变换命令对结点进行定位，可将任一结点放在图中的任一位置，这样做虽然自由，但是随着结点的增多，这个工作便会变得非常乏味。在绘制流程图的过程中，一个结点的位置通常是以它相对于另一个结点的位置而确定，而且二者的间距通常应当是定值。&lt;/p&gt;
&lt;p&gt;Snail 是个心怀宇宙的 MetaFun 模块，它绝对不会满足于牛顿式的绝对空间。如果真的存在绝对的空间，那么谁能告诉我太阳中心的三维坐标呢？倘若以上帝的视角去安排流程图中各个结点的绝对位置或者各个结点的绝对间距，只要用心，也是能够绘制出非常美观的流程图，然而这样的流程图没有生命，对结点的形状与位置略作一些修改，图的结构便会被破坏。上帝断然不会创造没有生命的物体，否则他就太蠢了，不值得供奉或敬仰。&lt;/p&gt;
&lt;p&gt;在 Snail 看来，结点的相对位置分为两类，恒星定位和行星定位。这两种定位决定了流程图结点分布的舒密。&lt;/p&gt;
&lt;p&gt;恒星定位是以结点中心之间的水平或竖直距离作为约束，基于一个结点的位置确定另一个结点的位置，这种定位可通过 Snail 宏 &lt;code&gt;as_star&lt;/code&gt; 实现。例如，将结点 &lt;code&gt;b&lt;/code&gt; 放在 &lt;code&gt;a&lt;/code&gt; 的右侧，让二者中心的水平距离为默认的行星距离：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;as_star(b, a, "right");
&lt;/pre&gt;


&lt;p&gt;类似地，可以用 &lt;code&gt;left&lt;/code&gt;、&lt;code&gt;top&lt;/code&gt; 以及 &lt;code&gt;bottom&lt;/code&gt;，将 &lt;code&gt;b&lt;/code&gt; 放在 &lt;code&gt;a&lt;/code&gt; 的左侧、顶部以及底部。Snail 默认的行星距离是 5 cm，这个值存储于 Snail 的一个全局变量 &lt;code&gt;_star.s&lt;/code&gt;，这意味着可通过修改这个变量控制流程图中以恒星定位的结点间距。还有一部分类似于 &lt;code&gt;_star.s&lt;/code&gt; 这样控制流程图整体样式的全局变量，在本文的最后会专门予以介绍。&lt;/p&gt;
&lt;p&gt;行星定位类似于恒星定位，唯一的区别前者在对一个结点进行定位时是以结点边框的间距——行星间距作为约束。所谓结点边框的间距，即对于任意结点 a 和 b，当它们的中心连线为同一条水平或竖直的线段时，a 和 b 的边框与该线段交点的距离。Snail 的宏 &lt;code&gt;as_planet&lt;/code&gt; 用于实现结点的行星定位，其用法与 &lt;code&gt;as_star&lt;/code&gt; 同，例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;as_planet(b, a, "bottom");
as_planet(c, b, "bottom");
as_planet(d, c, "right");
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/11.png"&gt;&lt;/p&gt;
&lt;h2&gt;组合&lt;/h2&gt;
&lt;p&gt;结点的恒星和行星定位还是太过于严格，以致一些特殊的结点定位需求难以满足，例如&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/snail/12.png"&gt;&lt;/p&gt;
&lt;p&gt;结点 d 的宽度与 a、b 和 c 相同，高度则是从 c 的底端到 a 的顶端。为了满足诸如此类的定位需求，Snail 提供了 &lt;code&gt;+++&lt;/code&gt; 运算符，用它可以将任意两个结点绑定起来，从而获得一个新的结点，而且新的结点所占据的区域恰好包含这两个结点。重复使用 &lt;code&gt;+++&lt;/code&gt; 便可以实现多个结点的绑定。&lt;/p&gt;
&lt;p&gt;对于形如上图所示的四个结点，可采用以下代码予以定位：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Node a, b, c, abc, d;
a := other("a", fullsquare xysized (2cm, 1cm));
b := other("b", like a);
c := other("c", like a);
as_planet(b, a, "bottom"); as_planet(c, b, "bottom");
abc := a +++ b +++ c;
d := other("d", like abc);
as_planet(d, abc, "right");

draw_each a, b, c, d;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/13.png"&gt;&lt;/p&gt;
&lt;h2&gt;水平 / 竖直对齐&lt;/h2&gt;
&lt;p&gt;若将一个结点的中心与另一个结点的中心在水平或竖直方向上对齐，可相应采用 Snail 的&lt;code&gt;halign&lt;/code&gt; 或 &lt;code&gt;valign&lt;/code&gt; 宏。例如，若将结点 &lt;code&gt;a&lt;/code&gt; 的中心与结点 &lt;code&gt;b&lt;/code&gt; 的中心在水平方向上对齐，即 &lt;code&gt;b&lt;/code&gt; 的位置固定，调整 &lt;code&gt;a&lt;/code&gt; 的位置，使得二者的中心在同一水平线上，只需&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;halign(a, b);
&lt;/pre&gt;


&lt;p&gt;同理，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;valign(a, b);
&lt;/pre&gt;


&lt;p&gt;可将以调整 &lt;code&gt;a&lt;/code&gt; 的位置，使得它的中心与 &lt;code&gt;b&lt;/code&gt; 的中心在竖直方向对齐。&lt;/p&gt;
&lt;p&gt;若以一个结点为基准，让一组结点的中心在水平或竖直方向上对齐，可以利用 MetaPost 的循环语句。例如，以 &lt;code&gt;a&lt;/code&gt; 为基准，将 &lt;code&gt;b&lt;/code&gt;、&lt;code&gt;c&lt;/code&gt;、&lt;code&gt;d&lt;/code&gt; 等结点的中心与 &lt;code&gt;a&lt;/code&gt; 的中心在水平方向上对齐：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;forsuffixes&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;halign&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="nt"&gt;endfor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;连接&lt;/h2&gt;
&lt;p&gt;当各个结点的摆放位置确定之后，考虑的便是它们之间的连接。基于恒星定位或行星定位的两个结点，若它们相邻，可直接连接。对于这种连接，Snail 提供了 &lt;code&gt;=&amp;gt;&lt;/code&gt; 运算符。&lt;code&gt;=&amp;gt;&lt;/code&gt; 左侧的结点称为出射结点，右侧的结点称为入射结点。&lt;code&gt;=&amp;gt;&lt;/code&gt; 会根据出射结点与入射结点的位置确定一条连线，该连线出射结点的边框上某条边的中点出发，沿水平或竖直方向抵达入射结点的边框。例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Node a, b;
a := proc("Node a");
b := proc("Node b");
as_planet(b, a, "right");

draw_each a, b;
flow a =&amp;gt; b;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/14.png"&gt;&lt;/p&gt;
&lt;p&gt;Snail 的 &lt;code&gt;flow&lt;/code&gt; 宏是 MetaFun 的 &lt;code&gt;drawarrowpath&lt;/code&gt; 宏的替代，用于绘制有向路径。&lt;/p&gt;
&lt;p&gt;再看一个例子：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Node a, b, c, abc, d;
a := other("a", fullsquare xysized (2cm, 1cm));
b := other("b", like a);
c := other("c", like a);
as_planet(b, a, "bottom");
as_planet(c, b, "bottom");
abc := a +++ b +++ c;
d := other("d", like abc);
as_planet(d, abc, "right");

draw_each a, b, c, d;
flow_each a =&amp;gt; d, b =&amp;gt; d, c =&amp;gt; d;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/15.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flow_each&lt;/code&gt; 与 &lt;code&gt;draw_each&lt;/code&gt; 类似，只不过它绘制的是一组有向路径。&lt;/p&gt;
&lt;p&gt;当两个结点既不水平排列也不在竖直排列时，二者的连接是折线。能够像 &lt;code&gt;=&amp;gt;&lt;/code&gt; 那样自动确定连接路径是一件很美好的事。然而，Snail 决定不要这种美好。&lt;/p&gt;
&lt;p&gt;对于弯曲的路径，Snail 会沿着我们小心谨慎地构造的路径，从出射结点爬到入射结点。该基于出射锚点、前进的方向、前行的距离以及入射锚点而确定。构造该路径的过程就是模拟蜗牛的爬行或人的行走。例如，从一个确定的地点，向东走 100 米，向北走 100 米，向西走 500 米，就这样转来转去，直至抵达目标地点为止。Snail 的 &lt;code&gt;walk&lt;/code&gt; 宏可用于构造这种路径。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;walk&lt;/code&gt; 的第一个参数是路径的起点，第二个参数是由行进方向和距离构造的路径，第三个参数是终点。起点和终点可由 Snail 的 &lt;code&gt;anchor&lt;/code&gt; 宏在源结点和目标结点的边框上确定。&lt;/p&gt;
&lt;p&gt;若结点的边框为矩形，&lt;code&gt;anchor&lt;/code&gt; 宏具备在该边框上确定任意一点的能力。例如，对于结点 &lt;code&gt;a&lt;/code&gt;，其左、右、上、下边框的中点，可由以下代码确定：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;anchor(a, "left", 0);
anchor(a, "right", 0);
anchor(a, "top", 0);
anchor(a, "bottom", 0);
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;anchor&lt;/code&gt; 前两个参数的作用已经很明显了，它的第三个参数是矩形边框上的参数坐标。对于矩形的每条边框，参数坐标的取值范围为 [-0.5, 0.5]，中点的参数坐标为 0。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/snail/16.png"&gt;&lt;/p&gt;
&lt;p&gt;现在 &lt;code&gt;walk&lt;/code&gt; 宏的第二个参数描述的是路径的起点与终点之间的部分，但是只能由行进方向和距离构成。例如 &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;path p;
p := (0, 0) &amp;gt;&amp;gt;&amp;gt; right * 1cm &amp;gt;&amp;gt;&amp;gt; up * 3cm &amp;gt;&amp;gt;&amp;gt; left * 8cm &amp;gt;&amp;gt;&amp;gt; down * 5cm &amp;gt;&amp;gt;&amp;gt; right * 4cm;
&lt;/pre&gt;


&lt;p&gt;表示从原点开始，向右走 1 cm，再向上走 3 cm，再向左走 8 cm，再向下走 6 cm，再向右走 6 cm。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/snail/17.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 是 Snail 实现的运算符，用于衔接各段行进方向及距离的「积」。由于模拟的是行走，以左右上下作为行进的方向不够自然，因而 Snail 定义了一组可以沿地理方向行进的宏：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_e_&lt;/code&gt;，&lt;code&gt;_n_&lt;/code&gt;，&lt;code&gt;_w_&lt;/code&gt;，&lt;code&gt;_s_&lt;/code&gt;：向东、北、西、南行进；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_E_&lt;/code&gt;，&lt;code&gt;_N_&lt;/code&gt;，&lt;code&gt;_W_&lt;/code&gt;，&lt;code&gt;_S_&lt;/code&gt;：向东、北、西、南行进，但是事先会行进 0.5 倍的行星间距；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_EE_&lt;/code&gt;，&lt;code&gt;_NN_&lt;/code&gt;，&lt;code&gt;_WW_&lt;/code&gt;，&lt;code&gt;_SS_&lt;/code&gt;：向东、北、西、南行进，但是事先会行进 1 倍的行星间距。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于这些宏，上述路径 &lt;code&gt;p&lt;/code&gt; 可表示为：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;p := (0, 0) &amp;gt;&amp;gt;&amp;gt; (_e_ 1cm) &amp;gt;&amp;gt;&amp;gt; (_n_ 3cm) &amp;gt;&amp;gt;&amp;gt; (_w_ 8cm) &amp;gt;&amp;gt;&amp;gt; (_s_ 5cm) &amp;gt;&amp;gt;&amp;gt; (_e_ 4cm);
&lt;/pre&gt;


&lt;p&gt;当蜗牛很任性地绕着圈子爬行的时候，就可以走出一条漩涡路径：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;numeric s; path p;
s := 0.25cm; p := (0, 0); 
for i = 1 upto 7:
  for j = "_n_", "_w_", "_s_", "_e_":
    s := s + 0.25cm;
    p := p &amp;gt;&amp;gt;&amp;gt; (scantokens(j) s);
  endfor;
endfor;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/18.png"&gt;&lt;/p&gt;
&lt;p&gt;现在，可以为结点构造折线形式的连接了。例如，对于一个结点，以其左边框的中点为起点，以其下边框的中点为终点，让路径自结点上方绕行，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Node a; pair a.out, a.in; path a.self, a.self.go; numeric a.w, a.h;
a := proc("打酱油");
a.out := anchor(a, "right", 0);
a.in  := anchor(a, "bottom", 0);
a.w := _bw_ a; a.h := _bh_ a;
a.self.go := (_E_ 0) &amp;gt;&amp;gt;&amp;gt; (_N_ .5a.h) &amp;gt;&amp;gt;&amp;gt; (_WW_ a.w) &amp;gt;&amp;gt;&amp;gt; (_SS_ a.h) &amp;gt;&amp;gt;&amp;gt; (_E_ .5a.w);
a.self := walk(a.out, a.self.go, a.in);
draw a; flow a.self;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/19.png"&gt;&lt;/p&gt;
&lt;p&gt;Snail 的宏 &lt;code&gt;_bw_&lt;/code&gt; 与 &lt;code&gt;_bh_&lt;/code&gt; 只是 MetaFun 宏 &lt;code&gt;bbwidth&lt;/code&gt; 与 &lt;code&gt;bbheight&lt;/code&gt; 的替代，分别用于获取结点的宽度与高度。宏 &lt;code&gt;flow&lt;/code&gt; 是 MetaFun 宏 &lt;code&gt;drawarrowpath&lt;/code&gt; 的替代，用于绘制带箭头的路径。&lt;/p&gt;
&lt;p&gt;绘制这样一条简单的折线路径，需要这么多的代码，这就是 Snail 绘制流程图的效率瓶颈。所幸之处在于，对于简单的流程图而言，折线路径并不会太多。偶尔这样模拟一下蜗牛式的爬行，在诸多以恒星和行星方式定位的结点分布空间中以折线的方式行走，很像乘坐太空飞船作星际旅行。&lt;/p&gt;
&lt;p&gt;倘若能够自动为结点构造一些常规锚点，例如每个结点边框上的中点，构造弯曲路径的代码便可以得到一些简化。Snail 的 &lt;code&gt;enrich&lt;/code&gt; 宏可基于给定的结点构造 8 个位于边框上的锚点，它们皆为 &lt;code&gt;pair&lt;/code&gt; 类型，以给定结点的变量名的后缀形式表示，分别位于这个结点的东（E）、东南（SE）、南（S）、西南（SW）、西（W）、西北（NW）、北（N）、东北（NE）位置。例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;enrich(a);
&lt;/pre&gt;


&lt;p&gt;结果可以得到一组 &lt;code&gt;pair&lt;/code&gt; 类型的后缀形式的变量，即 &lt;code&gt;a.E&lt;/code&gt;、&lt;code&gt;a.SE&lt;/code&gt;、&lt;code&gt;a.S&lt;/code&gt;、&lt;code&gt;a.SW&lt;/code&gt; 等。此外，&lt;code&gt;enrich&lt;/code&gt; 还可以获得结点边框的宽度和高度，例如 &lt;code&gt;a.width&lt;/code&gt; 和 &lt;code&gt;a.height&lt;/code&gt;。利用 &lt;code&gt;enrich&lt;/code&gt; 宏，便可以对上述的折线路径的构造过程予以简化：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Node a; path a.self;
a := proc("打酱油");
enrich(a);
a.self := walk(a.E, ((_E_ 0) &amp;gt;&amp;gt;&amp;gt; (_N_ .5a.height)
                     &amp;gt;&amp;gt;&amp;gt; (_WW_ a.width) &amp;gt;&amp;gt;&amp;gt; (_SS_ a.height) 
                     &amp;gt;&amp;gt;&amp;gt; (_E_ .5a.width)), a.S);
draw a;
flow a.self;
&lt;/pre&gt;


&lt;h2&gt;路径的标注&lt;/h2&gt;
&lt;p&gt;由于 MetaPost 支持以取值范围为 [0, 1] 的参数方式在一条路径上定位，因此利用这一特性，便可以对结点之间的连接进行标注。Snail 的 &lt;code&gt;tagged_flow&lt;/code&gt; 宏实现了这一功能。对于上一节所构造的路径 &lt;code&gt;a.self&lt;/code&gt;，若在参数为 0.65 的位置左侧增加文本标注，只需用 &lt;code&gt;tagged_flow&lt;/code&gt; 取代 &lt;code&gt;flow&lt;/code&gt; 宏，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;tagged_flow("路过", "left", .65) a.self;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/20.png"&gt;&lt;/p&gt;
&lt;p&gt;若需要对路径的标注文本进行旋转变换，使之与所标注位置的路径更为贴合，可利用 ConTeXt 的排版予以实现，MetaFun 的价值由此也得以体现。例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;tagged_flow("\rotate[90]{路过}", "left", .65) a.self;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="" src="/images/snail/21.png"&gt;&lt;/p&gt;
&lt;h2&gt;全局参数&lt;/h2&gt;
&lt;p&gt;Snail 预定义了一些全局变量，用于控制流程图的整体样式——文本颜色、边框颜色、边框背景以及留白等参数。&lt;/p&gt;
&lt;p&gt;流程图各个元素的颜色默认为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_io_color_ := black&lt;/code&gt;：I/O 结点的文本颜色，默认为黑色；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_proc_color_ := darkred&lt;/code&gt;：过程结点的文本颜色，默认为暗红色；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_flow_color_ := .9darkgray&lt;/code&gt;：结点连接线的颜色，默认为更暗一点的深灰色；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_frame_color_ := .7white&lt;/code&gt;：过程结点的边框颜色，默认为浅灰色；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_bg_color_ := .9white&lt;/code&gt;：过程结点的背景颜色，默认为更浅的灰色。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结点边框和结点连线的默认宽度为：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;_pensize_ := 2.5;
&lt;/pre&gt;


&lt;p&gt;结点连线的宽度和颜色默认设定为：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;drawpathoptions(withpen pencircle scaled _pensize_ withcolor _flow_color_);
&lt;/pre&gt;


&lt;p&gt;I/O 结点和过程结点文本四周留白尺寸默认为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;_pad_ := 4;  _proc_pad_ := 4_pad_;
&lt;/pre&gt;


&lt;p&gt;恒星和行星定位时所用的水平和竖直间距默认为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;_star.s := 4cm; _star.sx := _star.s; _star.sy := .5_star.sx;
_planet.s := .2_star.s; _planet.sx := _planet.s; _planet.sy := _planet.sx;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;_margin_&lt;/code&gt; 用于 &lt;code&gt;_E_&lt;/code&gt;、&lt;code&gt;_EE_&lt;/code&gt;、&lt;code&gt;_S_&lt;/code&gt;、&lt;code&gt;_SS_&lt;/code&gt; 等地理方向行进宏的预先行进的距离，默认值为 &lt;code&gt;.5_planet.s&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_expansion_&lt;/code&gt; 用于基于矩形构造与之外接的菱形和椭圆等图形时，后者的长轴与短轴在矩形的宽度与高度的基础上放大的倍数，默认值为 1.25。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;引用的文献：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] &lt;a href="https://segmentfault.com/a/1190000016832302"&gt;MetaFun 列传&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] Snail 模块：https://github.com/liyanrui/snail&lt;/p&gt;
&lt;p&gt;[3] &lt;a href="https://segmentfault.com/a/1190000003795931"&gt;zhfonts：ConTeXt MkIV 的中文支持模块&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>ConTeXt MkIV</category><category>MetaFun</category><guid>/posts/snail.html</guid><pubDate>Mon, 05 Nov 2018 04:20:20 GMT</pubDate></item><item><title>MetaFun 小传</title><link>/posts/metafun.html</link><dc:creator>Garfileo</dc:creator><description>&lt;div&gt;&lt;p&gt;MetaFun 是 ConTeXt 的一部分，主要用于 MetaPost 的绘图功能与 ConTeXt 的排版功能的衔接。&lt;/p&gt;
&lt;p&gt;ConTeXt 专事文字排版，功能匹于 LaTeX，但更易于使用，二者皆为 TeX 宏包，即二者皆基于 TeX 提供的宏编程功能，对 TeX 语言予以封装，建立更利于文字排版工作的高级语言。TeX 是一种计算机排版语言，供编排科技手稿以及著作出版印刷之用 &lt;strong&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/strong&gt; 。MetaPost 是用于绘制矢量绘图的计算机语言。&lt;/p&gt;
&lt;p&gt;目前最新的 ConTeXt 版本为 MkIV，安装 ConTeXt Standalone 可得 &lt;strong&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/strong&gt; 。ConTeXt MkIV 的基本用法可参考之前我写的几篇文章 &lt;strong&gt;&lt;sup&gt;[3–7]&lt;/sup&gt;&lt;/strong&gt; ，或阅读 ConTeXt 官方文档 &lt;strong&gt;&lt;sup&gt;[8, 9]&lt;/sup&gt;&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;MetaFun 以 MetaPost 生成的矢量图形作为页面特定区域的背景，而后基于 ConTeXt 的排版功能在该背景上实现编排文字。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/metafun/01.png"&gt;&lt;/p&gt;
&lt;h2&gt;MetaPost&lt;/h2&gt;
&lt;p&gt;MetaPost 是一种编程语言 &lt;strong&gt;&lt;sup&gt;注 1&lt;/sup&gt;&lt;/strong&gt; ，其编译器为 mpost。用该语言编写的程序，其输出结果为 PostScript 格式的矢量图形文件 &lt;strong&gt;&lt;sup&gt;注 2&lt;/sup&gt;&lt;/strong&gt; 。&lt;code&gt;MPpage&lt;/code&gt; 环境中的 MetaPost 语句即 MetaPost 程序。在使用 context 命令生成单页面图形文件的过程中，context 命令会调用 mpost，由后者处理 MetaPost 程序，生成 PostScript 图形文件。继而 context 命令调用 TeX 引擎 &lt;strong&gt;&lt;sup&gt;注 3&lt;/sup&gt;&lt;/strong&gt; 会将 mpost 生成的图形文件嵌入至单页面文档中，并将图形的宽高作为页面宽高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注 1&lt;/strong&gt;：确切地说，MetaPost 是一种宏编程语言。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注 2&lt;/strong&gt;：PostScript 文件可转化为 PDF、SVG 等格式的矢量图形文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注 3&lt;/strong&gt;：TeX 引擎即 TeX 文档的编译器。ConTeXt 文档本质上也是 TeX 文档，因此要通过 TeX 引擎对其其进行编译，输出排版结果。ConTeXt MkIV 的 TeX 引擎为 LuaTeX，其输出的排版结果为 PDF 格式文档。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;画笔&lt;/h2&gt;
&lt;p&gt;画笔即 MetaPost 的内置变量 &lt;code&gt;pen&lt;/code&gt;。MetaPost 提供了两种画笔类型，&lt;code&gt;pencircle&lt;/code&gt; 和 &lt;code&gt;pensquare&lt;/code&gt;，前者为 MetaPost 默认，「笔尖」为圆形，后者「笔尖」为方形。MetaPost 允许用户自行定义画笔类型。&lt;/p&gt;
&lt;p&gt;画笔主要用于控制所绘线条的粗细。线条默认的宽度为 PostScript 所规定的大点（Big Point）的直径尺寸，即 1 bp。MetaPost 将 1 bp 作为基准长度单位，其他单位皆为该单位的倍数：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;bp := 1&lt;/span&gt;
&lt;span class="err"&gt;mm = 2.83464&lt;/span&gt;
&lt;span class="err"&gt;cm = 28.34645&lt;/span&gt;
&lt;span class="err"&gt;pc = 11.95517&lt;/span&gt;
&lt;span class="err"&gt;cc = 12.79213&lt;/span&gt;
&lt;span class="err"&gt;in := 72&lt;/span&gt;
&lt;span class="err"&gt;pt = 0.99626&lt;/span&gt;
&lt;span class="err"&gt;dd = 1.06601&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pickup&lt;/code&gt; 命令可用于设定画笔，从而影响随后的绘图语句所绘制线条的粗细，这一影响直至 &lt;code&gt;pickup&lt;/code&gt; 命令的再次出现为止。例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pickup pencircle scaled 1mm;&lt;/span&gt;
&lt;span class="err"&gt;一系列绘图语句;&lt;/span&gt;
&lt;span class="err"&gt;pickup pencircle scaled 2mm;&lt;/span&gt;
&lt;span class="err"&gt;一系列绘图语句;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义了两个画笔，笔尖粗度分别为 1mm 和 2mm，分别会影响位于其后的绘图过程。&lt;code&gt;scaled&lt;/code&gt; 用于数值大小的缩放变换；其他变换还有 &lt;code&gt;shifted&lt;/code&gt;、&lt;code&gt;rotated&lt;/code&gt; 以及 &lt;code&gt;slant&lt;/code&gt;，分别为平移、旋转以及错切变换。在画笔的设定中，&lt;code&gt;scaled 1mm&lt;/code&gt; 意味着将线条粗细程序由 MetaPost 默认的 1 bp 在水平和竖直方向上同等放大为 1 mm &lt;strong&gt;&lt;sup&gt;注 4&lt;/sup&gt;&lt;/strong&gt; 。可以使用 &lt;code&gt;xscaled&lt;/code&gt; 或 &lt;code&gt;yscaled&lt;/code&gt; 对画笔的水平或竖直方向的粗细进行调整，对于 &lt;code&gt;pencircle&lt;/code&gt; 类型的画笔而言，此举意味着将笔尖由默认的圆形转化为椭圆，而对于 &lt;code&gt;pensquare&lt;/code&gt;，则意味着将笔尖由正方形转化为矩形。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注 4&lt;/strong&gt;：在 MetaPost 程序中，数字与单位之间不能出现空格。事实上，在 MetaPost 中，诸如 &lt;code&gt;1mm&lt;/code&gt;、&lt;code&gt;2cm&lt;/code&gt; 此类的长度描述本质上是 &lt;code&gt;mm&lt;/code&gt; 或 &lt;code&gt;cm&lt;/code&gt; 等变量的倍数，即 &lt;code&gt;1 * mm&lt;/code&gt;、&lt;code&gt;2 * cm&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 &lt;code&gt;pickup&lt;/code&gt; 的影响范围内，绘图语句可以通过 &lt;code&gt;withpen&lt;/code&gt; 命令局部调整线条的粗细，例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;withpen pencircle scaled 1mm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;颜色&lt;/h2&gt;
&lt;p&gt;MetaPost 以含有三个分量的向量表示颜色。向量的三个分量分别表示红色、绿色和蓝色，取值范围为 [0, 1]，例如 &lt;code&gt;(0.4, 0.5, 0.6)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可将颜色保存到 &lt;code&gt;color&lt;/code&gt; 类型的变量中，以备绘图中重复使用。例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;color darkred;&lt;/span&gt;
&lt;span class="err"&gt;darkred := (0.625, 0, 0);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于 MetaPost 内部已经定义了用于表示红色的变量 &lt;code&gt;red&lt;/code&gt;，因此 &lt;code&gt;darkred&lt;/code&gt; 变量的定义也可写为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;color darkred;&lt;/span&gt;
&lt;span class="err"&gt;darkred := 0.625 * red;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似于 &lt;code&gt;1 * cm&lt;/code&gt; 可以写为 &lt;code&gt;1cm&lt;/code&gt;，倍数也可以直接作用于颜色：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;darkred := 0.625red;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在绘图语句中可以通过 &lt;code&gt;withcolor&lt;/code&gt; 命令设定所绘线条或区域填充的颜色，例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;withcolor 0.625red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于颜色的倍数不可能大于 1，因此整数部分必定为 &lt;code&gt;0&lt;/code&gt;，在 MetaPost 语句中可以省略，例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;darkred := .625red;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若绘图语句未通过 &lt;code&gt;withcolor&lt;/code&gt; 命令设定颜色，则默认颜色为黑色。&lt;/p&gt;
&lt;h2&gt;单页图&lt;/h2&gt;
&lt;p&gt;在排版空间中，可安置 MetaPost 图形之处大致有插图、单页图、页面元素背景以及页面背景等类别。若以先习得 MetaPost 的基本用法为目的，则单页图最为合用，并且生成的图形易于转化为位图以作他用。&lt;/p&gt;
&lt;p&gt;所谓 MetaPost 单页图，本质上是 ConTeXt 输出的排版结果——PDF 文档，只是文档页面的大小恰好容得下图形。ConTeXt 为 MetaPost 单页面提供了 &lt;code&gt;MPpage&lt;/code&gt; 环境：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\startMPpage&lt;/span&gt;
MetaPost 绘图语句;
&lt;span class="k"&gt;\stopMPpage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如，假设存在 ConTeXt 文档 foo.tex，其内容为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\startMPpage&lt;/span&gt;
path p;
u := 10cm; v := 3cm;
p := fullsquare xyscaled (u, v) randomized 0.07u;
drawpath p;
drawpoints p;
&lt;span class="k"&gt;\stopMPpage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过 context 命令便可基于 foo.tex 生成 foo.pdf，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt; context foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果得到的 foo.pdf 为单页文档，其页面只包含着一个边线被随机扰动的矩形：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/metafun/02.png"&gt;&lt;/p&gt;
&lt;h2&gt;线条&lt;/h2&gt;
&lt;p&gt;线条即画笔所走的路径。最简单的路径是点。MetaPost 用序对表示点，例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pair a;&lt;/span&gt;
&lt;span class="err"&gt;a := (2cm, 3.5cm)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示在直接坐标系中，横坐标 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;2cm&lt;/code&gt; 而纵坐标 &lt;code&gt;y&lt;/code&gt; 为 &lt;code&gt;3.5cm&lt;/code&gt; 之处有一个点 &lt;code&gt;a&lt;/code&gt;。&lt;code&gt;draw&lt;/code&gt; 命令用于路径的绘制，通过它可将点 &lt;code&gt;a&lt;/code&gt; 绘制出来，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;draw a;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从一个点到另一个点，可构成一条线段。例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;-- b;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可构造从点 &lt;code&gt;a&lt;/code&gt; 到 &lt;code&gt;b&lt;/code&gt; 的线段 &lt;code&gt;a -- b&lt;/code&gt;，并将其保存到路径变量 &lt;code&gt;p&lt;/code&gt; 中。使用&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;draw p withcolor .625green;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可绘制这条线段。在该条语句中，线条颜色被设为暗绿色 &lt;code&gt;0.625green&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;由于 MetaPost 允许在 &lt;code&gt;draw&lt;/code&gt; 语句中直接给出点的坐标的形式构造路径，因此上述 MetaPost 程序可缩减为一行语句：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;draw (2cm, 3.5cm) -- (5cm, 5cm) withcolor .625green;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，若要绘制复杂的图形，借助变量，会使得 MetaPost 程序更易于编写和理解。例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;-- b;&lt;/span&gt;

&lt;span class="n"&gt;pickup&lt;/span&gt; &lt;span class="n"&gt;pencircle&lt;/span&gt; &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;withcolor&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;625&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;pickup&lt;/span&gt; &lt;span class="n"&gt;pencircle&lt;/span&gt; &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;darkred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;darkred&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;625&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;withcolor&lt;/span&gt; &lt;span class="n"&gt;darkred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;withcolor&lt;/span&gt; &lt;span class="n"&gt;darkred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/03.png"&gt;&lt;/p&gt;
&lt;p&gt;不仅绘制了线段，而且将线段的端点也绘制了出来。&lt;/p&gt;
&lt;p&gt;利用线段可绘制任意的多边形。例如，绘制一个直角三角形，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="s"&gt;a,&lt;/span&gt; &lt;span class="s"&gt;b,&lt;/span&gt; &lt;span class="s"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="s"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="s"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;(0,&lt;/span&gt; &lt;span class="s"&gt;0)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="s"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;(4cm,&lt;/span&gt; &lt;span class="s"&gt;0)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;(4cm,&lt;/span&gt; &lt;span class="s"&gt;3cm)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="s"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;a&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;% 注意：凡以百分号领起的文本为 MetaPost 代码注释。&lt;/span&gt;

&lt;span class="n"&gt;pickup&lt;/span&gt; &lt;span class="s"&gt;pencircle&lt;/span&gt; &lt;span class="s"&gt;scaled&lt;/span&gt; &lt;span class="s"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;% 将画笔设为 5 bp&lt;/span&gt;
&lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="s"&gt;p&lt;/span&gt; &lt;span class="s"&gt;withcolor&lt;/span&gt; &lt;span class="s"&gt;.8white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;pickup&lt;/span&gt; &lt;span class="s"&gt;pencircle&lt;/span&gt; &lt;span class="s"&gt;scaled&lt;/span&gt; &lt;span class="s"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="s"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="s"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/04.png"&gt;&lt;/p&gt;
&lt;p&gt;为了便于图形的演示，MetaFun 提供了 &lt;code&gt;drawpath&lt;/code&gt; 和 &lt;code&gt;drawpoints&lt;/code&gt; 宏，前者用于绘制路径，后者用于绘制路径的节点。通过这两个宏，上例可简化为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pair a, b, c; path p;&lt;/span&gt;
&lt;span class="err"&gt;a := (0, 0); b := (4cm, 0); c := (4cm, 3cm);&lt;/span&gt;
&lt;span class="err"&gt;p := a -- b -- c -- a;&lt;/span&gt;
&lt;span class="err"&gt;drawpath p; drawpoints p;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显然，上述路径 &lt;code&gt;p&lt;/code&gt; 是一条闭合路径，但 MetaPost 对此并不知情，需要通过 &lt;code&gt;cycle&lt;/code&gt; 命令告诉它，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p := a -- b -- c -- cycle;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;否则，虽然我们认为 &lt;code&gt;p&lt;/code&gt; 是闭合路径，但 MetaPost 并不苟同，以致在使用 &lt;code&gt;fill&lt;/code&gt; 命令对该路径包围的区域填充颜色时，会导致 MetaPost 报错并罢工。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fill&lt;/code&gt; 命令可对闭合路径所包围的区域着色。例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pair a, b, c; path p;&lt;/span&gt;
&lt;span class="err"&gt;a := (0, 0); b := (4cm, 0); c := (4cm, 3cm);&lt;/span&gt;
&lt;span class="err"&gt;p := a -- b -- c -- cycle;&lt;/span&gt;
&lt;span class="err"&gt;drawpath p; drawpoints p;&lt;/span&gt;
&lt;span class="err"&gt;fill p withcolor .8blue;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/05.png"&gt;&lt;/p&gt;
&lt;p&gt;上例中的路径 &lt;code&gt;p&lt;/code&gt; 皆为直线插值。MetaPost 支持以曲线插值的方式构造路径。倘若将直线插值符的 &lt;code&gt;--&lt;/code&gt; 替换为曲线插值符 &lt;code&gt;..&lt;/code&gt; 便可产生一条插值于点 &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt; 和 &lt;code&gt;c&lt;/code&gt; 的曲线路径，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p := a .. b .. c .. cycle;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/06.png"&gt;&lt;/p&gt;
&lt;p&gt;直线插值符与曲线插值符可并用，例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p := a .. b .. c -- cycle;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/07.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;controls&lt;/code&gt; 命令可将路径中的某些结点转化为控制点，从而可构造 Bézier 曲线。例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p := a .. controls b ..c; draw p;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/08.png"&gt;&lt;/p&gt;
&lt;p&gt;构造的是一条二次 Bézier 曲线路径，此时点 &lt;code&gt;b&lt;/code&gt; 成为控制点，曲线只插值于点 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;。MetaFun 提供了 &lt;code&gt;drawcontrollines&lt;/code&gt; 以及 &lt;code&gt;drawcontrolpoints&lt;/code&gt; 宏，分别用于绘制 Bézier 曲线的控制形及控制点，例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p := a .. controls b ..c;&lt;/span&gt;
&lt;span class="err"&gt;drawpath p; drawpoints p;&lt;/span&gt;
&lt;span class="err"&gt;drawcontrollines p; drawcontrolpoints p;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/09.png"&gt;&lt;/p&gt;
&lt;p&gt;三次 Bézier 曲线需要在路径中设定 2 个控制点，例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;controls&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;drawpath&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;drawpoints&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;drawcontrollines&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;drawcontrolpoints&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/10.png"&gt;&lt;/p&gt;
&lt;p&gt;无论是插值曲线还是 Bézier 曲线，MetaPost 最高支持三次曲线。不过，对于形状较为复杂的路径，MetaPost 支持以多段插值直线、曲线以及 Bézier 曲线拼接 &lt;strong&gt;&lt;sup&gt;注 5&lt;/sup&gt;&lt;/strong&gt; 的方式构造路径。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注 5&lt;/strong&gt;：对于一组曲线，MetaPost 会以切向连续并且近似曲率连续的方式予以光滑拼接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;变换&lt;/h2&gt;
&lt;p&gt;为了便于对所绘图形作缩放、旋转、平移、错切以及随机扰动等处理，MetaPost 提供了一种数据类型——变换，即含有六个分量的向量：&lt;/p&gt;
&lt;p&gt;$$
T = (t_x, t_y, t_{xx}, t_{xy}, t_{yx}, t_{yy})
$$&lt;/p&gt;
&lt;p&gt;对于任意一点　\(p=(p_x, p_y)\)，MetaPost 的 &lt;code&gt;transformed&lt;/code&gt; 命令可将 \(T\) 作用于 \(p\)，即 &lt;code&gt;p transformed T&lt;/code&gt;，可将 \(p\) 变换为&lt;/p&gt;
&lt;p&gt;$$
q = (t_{xx}p_x + t_{xy}p_y + t_x, t_{yx}p_x + t_{yy}p_y + t_y)
$$&lt;/p&gt;
&lt;p&gt;实质上，若以仿射坐标的形式看待 \(p\)，并采用列向量 \(\left[\begin{matrix}p_x \\ p_y \\ 1\end{matrix}\right]\) 表示其坐标，则 \(T\) 的 6 个分量可形成坐标变换矩阵&lt;/p&gt;
&lt;p&gt;$$
M = \left[\begin{matrix}
t_{xx} &amp;amp; t_{xy} &amp;amp; t_x \\
t_{yx} &amp;amp; t_{yy} &amp;amp; t_y \\
0 &amp;amp; 0 &amp;amp; 1\end{matrix}\right]
$$&lt;/p&gt;
&lt;p&gt;此时，&lt;code&gt;p transformed T&lt;/code&gt; 语句所描述的坐标变换，便可表示为 \(q = Mp\)。坐标变换矩阵 \(M\) 所描述的是平移、旋转、缩放以及错切等变换的组合，亦即这些特定的变换皆为 \(M\) 的特例。因此，通常并不直接提供六元组形式的变换，而是以 &lt;code&gt;scaled&lt;/code&gt;、&lt;code&gt;shifted&lt;/code&gt; 以及 &lt;code&gt;rotated&lt;/code&gt; 等变换的组合构造一个变换。&lt;/p&gt;
&lt;p&gt;假设在边长为 8cm 的正方形区域&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;numeric sidelength, u; &lt;/span&gt;
&lt;span class="err"&gt;sidelength := 8cm; u := 0.5sidelength;&lt;/span&gt;
&lt;span class="err"&gt;drawpath fullsquare scaled sidelength dashed (evenly scaled 1mm);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/11.png"&gt;&lt;/p&gt;
&lt;p&gt;有四个点&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pair a, b, c, d;&lt;/span&gt;
&lt;span class="err"&gt;a := (-0.5, -0.5) * u;&lt;/span&gt;
&lt;span class="err"&gt;b := (-0.5, 0.5) * u;&lt;/span&gt;
&lt;span class="err"&gt;c := (0.5, 0.5) * u;&lt;/span&gt;
&lt;span class="err"&gt;d := (0.5, -0.5) * u;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它们构成路径 &lt;code&gt;p&lt;/code&gt;，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;path p; p := a -- b -- c -- d;&lt;/span&gt;
&lt;span class="err"&gt;drawpath p; drawpoints p;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/12.png"&gt;&lt;/p&gt;
&lt;p&gt;现在将 &lt;code&gt;p&lt;/code&gt; 缩小为原来的 0.5 倍，可为此构造变换 &lt;code&gt;T&lt;/code&gt;，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;transform T;&lt;/span&gt;
&lt;span class="err"&gt;T := identity scaled 0.5;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;identity&lt;/code&gt; 是 MetaPost 内置的恒等变换，其值为向量 &lt;code&gt;(0, 0, 1, 0, 0, 1)&lt;/code&gt;，将其写为齐次坐标变换矩阵，可得&lt;/p&gt;
&lt;p&gt;$$
\left[\begin{matrix}
1 &amp;amp; 0  &amp;amp; 0 \\
0 &amp;amp; 1 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 1\end{matrix}\right]
$$&lt;/p&gt;
&lt;p&gt;因此，实际上 &lt;code&gt;identity&lt;/code&gt; 表示的是单位矩阵。因此 &lt;code&gt;identity scaled 0.5&lt;/code&gt; 所构造的变换，本质上是以一个单位矩阵乘以由 &lt;code&gt;scaled 0.5&lt;/code&gt; 构造的缩放变换矩阵&lt;/p&gt;
&lt;p&gt;$$
\left[\begin{matrix}
0.5 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 0.5 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 1\end{matrix}\right]
$$&lt;/p&gt;
&lt;p&gt;在这里，&lt;code&gt;identity&lt;/code&gt; 的唯一作用是喂给 &lt;code&gt;scaled&lt;/code&gt; 命令，令其得以工作。因为 MetaPost 所有的特定坐标变换命令在工作时要求它的前面必须存在一个表达式，这个表达式可以是一个变换，也可以是一条路径。因此 &lt;code&gt;identity&lt;/code&gt; 能够满足这些命令的需要，而且不影响它们的行为。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;transformed&lt;/code&gt; 可将 &lt;code&gt;T&lt;/code&gt; 作用于路径 &lt;code&gt;p&lt;/code&gt;，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;path q; q := p transformed T;&lt;/span&gt;
&lt;span class="err"&gt;drawpath q withcolor .7green;&lt;/span&gt;
&lt;span class="err"&gt;drawpoints q withcolor .7red;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/13.png"&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;T&lt;/code&gt; 的基础上可以继续增加变换。例如，通过 &lt;code&gt;shifted&lt;/code&gt; 让经过了缩放变换的 &lt;code&gt;p&lt;/code&gt; 向左平移 &lt;code&gt;0.7 * u&lt;/code&gt;：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;T := T shifted (-0.7 * u, 0);&lt;/span&gt;
&lt;span class="err"&gt;q := p transformed T;&lt;/span&gt;
&lt;span class="err"&gt;drawpath  q withcolor .7blue; drawpoints q withcolor .7yellow;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/14.png"&gt;&lt;/p&gt;
&lt;p&gt;接下来，在 &lt;code&gt;T&lt;/code&gt; 的基础上，再增加一个旋转变换，令经过了缩放和平移变换后的 &lt;code&gt;p&lt;/code&gt;，即 &lt;code&gt;p transformed T&lt;/code&gt;，绕其中心点逆时针转动 90 度。通过 &lt;code&gt;rotated&lt;/code&gt; 命令可构造旋转变换，但是该命令是以原点为中心对路径进行旋转。若对经过了缩放和平移变换后的 &lt;code&gt;p&lt;/code&gt; 绕其中心作旋转变换，首先需要确定 &lt;code&gt;p&lt;/code&gt; 在经过缩放和平移之后的中心点。由于 &lt;code&gt;p&lt;/code&gt; 的初始中心点可根据它的 4 个节点计算出来，结果为 &lt;code&gt;(0, 0)&lt;/code&gt;，亦即原点，因此只需对 &lt;code&gt;p&lt;/code&gt; 的初始中心点予以 &lt;code&gt;T&lt;/code&gt; 变换，便可得到变换后的 &lt;code&gt;p&lt;/code&gt; 的中心点，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pair pcenter;&lt;/span&gt;
&lt;span class="err"&gt;pcenter := (0, 0) transformed T;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若让 &lt;code&gt;p transformed T&lt;/code&gt; 围绕 &lt;code&gt;pcenter&lt;/code&gt; 逆时针旋转 90 度角，需要先对 &lt;code&gt;p transformed T&lt;/code&gt; 进行平移变换，令其中心与原点对准，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p transofmed T shifted (-(xpart pcenter), -(ypart pcenter))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;xpart&lt;/code&gt; 和 &lt;code&gt;ypart&lt;/code&gt; 分别用于提取任意一点的横坐标与纵坐标分量。然后，对此刻的 &lt;code&gt;p&lt;/code&gt; 逆时针旋转 90 度角，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p transofmed T shifted (-(xpart pcenter), -(ypart pcenter)) rotated 90&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，通过 &lt;code&gt;shifted&lt;/code&gt; 将此刻的 &lt;code&gt;p&lt;/code&gt; 移回原位，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p transofmed T shifted (-(xpart pcenter), -(ypart pcenter)) &lt;/span&gt;
&lt;span class="err"&gt;               rotated 90 &lt;/span&gt;
&lt;span class="err"&gt;               shifted ((xpart pcenter), (ypart pcenter))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若将上述的变换叠加到 &lt;code&gt;T&lt;/code&gt; 中，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;T := T shifted (-(xpart pcenter), -(ypart pcenter)) &lt;/span&gt;
&lt;span class="err"&gt;     rotated 90 &lt;/span&gt;
&lt;span class="err"&gt;     shifted ((xpart pcenter), (ypart pcenter));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将 &lt;code&gt;T&lt;/code&gt; 作用于 &lt;code&gt;p&lt;/code&gt;，便可实现 &lt;code&gt;p transformed T&lt;/code&gt; 围绕 &lt;code&gt;pcenter&lt;/code&gt; 逆时针旋转 90 度角，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;drawpath p transformed T withcolor .7red;&lt;/span&gt;
&lt;span class="err"&gt;drawpoints p transformed T withcolor .7cyan;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过，MetaPost 的 &lt;code&gt;rotatedaround&lt;/code&gt; 变换已经实现了上述的围绕指定点对路径进行旋转的功能，因此上述的 &lt;code&gt;T&lt;/code&gt; 可简写为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;T := T rotatedaround (pcenter, 90);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，在 &lt;code&gt;T&lt;/code&gt; 的基础上，增加一个镜象变换，例如，以过原点 &lt;code&gt;(0, 0)&lt;/code&gt; 且斜率为 1 的一条直线为镜线，将 &lt;code&gt;p transformed T&lt;/code&gt; 变换为自身的影像。为了便于观察，先将镜线绘制出来，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pair mb, me;&lt;/span&gt;
&lt;span class="err"&gt;mb := (-1, -1) * u;&lt;/span&gt;
&lt;span class="err"&gt;me := (1, 1) * u;&lt;/span&gt;
&lt;span class="err"&gt;drawarrowpath mb -- me;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/15.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;drawarrowpath&lt;/code&gt; 宏可绘制路径及其走向。显然，&lt;code&gt;mirrorline&lt;/code&gt; 过原点 &lt;code&gt;(0, 0)&lt;/code&gt; 且斜率为 1，基于它，可构造一个镜象变换。并将其叠加至 &lt;code&gt;T&lt;/code&gt;，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;T := T reflectedabout (mb, me);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将 &lt;code&gt;T&lt;/code&gt; 作用于 &lt;code&gt;p&lt;/code&gt; 便可得到 &lt;code&gt;p&lt;/code&gt; 的镜象，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;drawpath p transformed T withcolor .7red;&lt;/span&gt;
&lt;span class="err"&gt;drawpoints p transformed T withcolor .7cyan;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/16.png"&gt;&lt;/p&gt;
&lt;h2&gt;路径合成&lt;/h2&gt;
&lt;p&gt;不仅变换可以叠加合成，路径也可以如此。例如，对于上一节所给出的路径 &lt;code&gt;p&lt;/code&gt;，对其作旋转、平移变换，生成路径 &lt;code&gt;q&lt;/code&gt;，然后通过 &lt;code&gt;--&lt;/code&gt; 可将二者连接起来，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;path q[];&lt;/span&gt;
&lt;span class="err"&gt;q[1] := p scaled 0.5;&lt;/span&gt;
&lt;span class="err"&gt;q[2] := q[1] shifted (s, 0);&lt;/span&gt;
&lt;span class="err"&gt;q[3] := q[1] -- q[2];&lt;/span&gt;
&lt;span class="err"&gt;drawpath q[3]; drawpoints q[3];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/17.png"&gt;&lt;/p&gt;
&lt;p&gt;在 MetaPost 中，类似 &lt;code&gt;q&lt;/code&gt; 这样的变量称为带有后缀的变量。可以用此类变量模拟数组。&lt;/p&gt;
&lt;h2&gt;从简单到复杂&lt;/h2&gt;
&lt;p&gt;通过图形变换和路径合成，可基于简单图形，构造复杂图形。下面以 Hilbert 曲线的绘制为例，在实践中感受 MetaPost 的魅力。&lt;/p&gt;
&lt;p&gt;首先，回顾路径 &lt;code&gt;p&lt;/code&gt;：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;numeric&lt;/span&gt; &lt;span class="n"&gt;sidelength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;sidelength&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;sidelength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;drawpath&lt;/span&gt; &lt;span class="n"&gt;fullsquare&lt;/span&gt; &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;dashed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evenly&lt;/span&gt; &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;-- b -- c -- d;&lt;/span&gt;
&lt;span class="n"&gt;drawpath&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;drawpoints&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/18.png"&gt;&lt;/p&gt;
&lt;p&gt;此时的 &lt;code&gt;p&lt;/code&gt;，称为 1 阶 Hilbert 曲线。&lt;/p&gt;
&lt;p&gt;接下来，构造四个变换：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;  transform sw, nw, ne, se;&lt;/span&gt;
&lt;span class="err"&gt;  sw := identity&lt;/span&gt;
&lt;span class="err"&gt;        scaled 0.5&lt;/span&gt;
&lt;span class="err"&gt;        reflectedabout ((0, 0), (1, 1))&lt;/span&gt;
&lt;span class="err"&gt;        shifted (-0.5u, -0.5u);&lt;/span&gt;
&lt;span class="err"&gt;  nw := identity&lt;/span&gt;
&lt;span class="err"&gt;        scaled 0.5&lt;/span&gt;
&lt;span class="err"&gt;        shifted (-0.5u, 0.5u);&lt;/span&gt;
&lt;span class="err"&gt;  ne := identity&lt;/span&gt;
&lt;span class="err"&gt;        scaled 0.5&lt;/span&gt;
&lt;span class="err"&gt;        shifted (0.5u, 0.5u);&lt;/span&gt;
&lt;span class="err"&gt;  se := identity&lt;/span&gt;
&lt;span class="err"&gt;        scaled 0.5&lt;/span&gt;
&lt;span class="err"&gt;        reflectedabout ((0, 0), (1, -1))&lt;/span&gt;
&lt;span class="err"&gt;        shifted (0.5u, -0.5u);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将这四个变换分别作用于 &lt;code&gt;p&lt;/code&gt; 并将生成的新路径连接起来，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p := p transformed sw&lt;/span&gt;
&lt;span class="err"&gt;     -- p transformed nw&lt;/span&gt;
&lt;span class="err"&gt;     -- p transformed ne&lt;/span&gt;
&lt;span class="err"&gt;     -- p transformed se;&lt;/span&gt;
&lt;span class="err"&gt;drawpath p; drawpoints p;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/19.png"&gt;&lt;/p&gt;
&lt;p&gt;所得结果称为 2 阶 Hilbert 曲线。对 &lt;code&gt;p&lt;/code&gt; 再次做上述变换，便可构造出 3 阶 Hilbert 曲线，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="n"&gt;sw&lt;/span&gt;
     &lt;span class="c1"&gt;-- p transformed nw&lt;/span&gt;
     &lt;span class="c1"&gt;-- p transformed ne&lt;/span&gt;
     &lt;span class="c1"&gt;-- p transformed se;&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="n"&gt;sw&lt;/span&gt;
     &lt;span class="c1"&gt;-- p transformed nw&lt;/span&gt;
     &lt;span class="c1"&gt;-- p transformed ne&lt;/span&gt;
     &lt;span class="c1"&gt;-- p transformed se;&lt;/span&gt;

&lt;span class="n"&gt;drawpath&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;drawpoints&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/20.png"&gt;&lt;/p&gt;
&lt;p&gt;依此类推，可继续构造更高阶的 Hilbert 曲线。随着阶数的升高，曲线很快会将一个正方形区域填满，例如 5 阶曲线，&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/metafun/21.png"&gt;&lt;/p&gt;
&lt;p&gt;因此，Hilbert 曲线通常被称为空间填充曲线。利用 Hilbert 曲线，可将多维空间转化为一维连续空间。&lt;/p&gt;
&lt;h2&gt;循环&lt;/h2&gt;
&lt;p&gt;使用 MetaPost 的 &lt;code&gt;for&lt;/code&gt; 循环语句对高阶 Hilbert 曲线的构造代码予以简化。例如构造 5 阶 Hilbert 曲线，只需&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for i := 2 upto 5:&lt;/span&gt;
&lt;span class="err"&gt;    p := p transformed sw&lt;/span&gt;
&lt;span class="err"&gt;         -- p transformed nw&lt;/span&gt;
&lt;span class="err"&gt;         -- p transformed ne&lt;/span&gt;
&lt;span class="err"&gt;         -- p transformed se;&lt;/span&gt;
&lt;span class="err"&gt;endfor;&lt;/span&gt;
&lt;span class="err"&gt;drawpath p; drawpoints p;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若采用更为通用的 &lt;code&gt;for&lt;/code&gt; 语句，上述的 &lt;code&gt;for&lt;/code&gt; 代码可改为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for i := 2 step 1 until 5:&lt;/span&gt;
&lt;span class="err"&gt;    p := p transformed sw&lt;/span&gt;
&lt;span class="err"&gt;         -- p transformed nw&lt;/span&gt;
&lt;span class="err"&gt;         -- p transformed ne&lt;/span&gt;
&lt;span class="err"&gt;         -- p transformed se;&lt;/span&gt;
&lt;span class="err"&gt;endfor;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;step&lt;/code&gt; 可以控制循环变量 &lt;code&gt;i&lt;/code&gt; 的步长。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt; 也可用于对象序列的迭代访问。例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p := p transformed sw&lt;/span&gt;
&lt;span class="err"&gt;     -- p transformed nw&lt;/span&gt;
&lt;span class="err"&gt;     -- p transformed ne&lt;/span&gt;
&lt;span class="err"&gt;     -- p transformed se;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可写为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;p := p transformed sw for j := nw, ne, se: -- p transformed j endfor;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MetaPost 允许表达式中出现循环语句，而且循环的最终结果是每一轮循环所包含的内容的连接。&lt;/p&gt;
&lt;h2&gt;宏&lt;/h2&gt;
&lt;p&gt;在一个 MetaPost 程序里，除了数据以及注释语句之外，剩下的几乎都是宏。mpost 会将程序中所有的宏展开，从而得到最为基本的绘图语句的组合，继而 mpost 将这些基本的绘图语句翻译为 PostScript 语句，从而得到 PostScript 格式的文档。&lt;/p&gt;
&lt;p&gt;宏的展开，其基本原理是文本替换。例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for i := 1 upto 4:&lt;/span&gt;
&lt;span class="err"&gt;    MetaPost 语句;&lt;/span&gt;
&lt;span class="err"&gt;endfor;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中的 &lt;code&gt;upto&lt;/code&gt; 就是一个宏，mpost 会将它的展开为 &lt;code&gt;step 1 until&lt;/code&gt;。之所以如此，是因为 &lt;code&gt;upto&lt;/code&gt; 的定义&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;def upto = step 1 until enddef;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;upto&lt;/code&gt; 没有参数，它的展开本质上是单纯的文本替换。有参数的宏可以通过参数调整宏的展开结果；宏的参数，本质上是宏展开文本中可变的部分。&lt;/p&gt;
&lt;p&gt;通过有参数的宏，可实现更具一般性的 Hilbert 曲线的构造过程。对于 Hilbert 曲线的构造过程而言，可变的部分有 Hilbert 曲线所填充的正方形区域的边长以及 Hilbert 曲线的阶数，若将二者分别用 &lt;code&gt;numeric&lt;/code&gt; 类型的变量 &lt;code&gt;sidelength&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; 表示，那么一般性的 Hilbert 曲线的构造过程可表示为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;numeric&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5sidelength&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;pair&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;d&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;c&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;transform&lt;/span&gt; &lt;span class="nt"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;nw&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ne&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;se&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;sw&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;identity&lt;/span&gt;
      &lt;span class="nt"&gt;scaled&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;
      &lt;span class="nt"&gt;reflectedabout&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
      &lt;span class="nt"&gt;shifted&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;nw&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;identity&lt;/span&gt;
      &lt;span class="nt"&gt;scaled&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;
      &lt;span class="nt"&gt;shifted&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;ne&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;identity&lt;/span&gt;
      &lt;span class="nt"&gt;scaled&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;
      &lt;span class="nt"&gt;shifted&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;se&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;identity&lt;/span&gt;
      &lt;span class="nt"&gt;scaled&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;
      &lt;span class="nt"&gt;reflectedabout&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
      &lt;span class="nt"&gt;shifted&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;upto&lt;/span&gt; &lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;transformed&lt;/span&gt; &lt;span class="nt"&gt;sw&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;nw&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ne&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;se&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;transformed&lt;/span&gt; &lt;span class="nt"&gt;j&lt;/span&gt; &lt;span class="nt"&gt;endfor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;endfor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;drawpath&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;drawpoints&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将上述语句作为宏 &lt;code&gt;hilbert&lt;/code&gt; 的替换文本，并将 &lt;code&gt;sidelength&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; 作为 &lt;code&gt;hilbert&lt;/code&gt; 宏的参数，则 &lt;code&gt;hilbert&lt;/code&gt; 宏可定义为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;def&lt;/span&gt; &lt;span class="nt"&gt;hilbert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;expr&lt;/span&gt; &lt;span class="nt"&gt;sidelength&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="nt"&gt;numeric&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5sidelength&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;pair&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;d&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;c&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nt"&gt;transform&lt;/span&gt; &lt;span class="nt"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;nw&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ne&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;se&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;sw&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;identity&lt;/span&gt;
        &lt;span class="nt"&gt;scaled&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;
        &lt;span class="nt"&gt;reflectedabout&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="nt"&gt;shifted&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="nt"&gt;nw&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;identity&lt;/span&gt;
        &lt;span class="nt"&gt;scaled&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;
        &lt;span class="nt"&gt;shifted&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="nt"&gt;ne&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;identity&lt;/span&gt;
        &lt;span class="nt"&gt;scaled&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;
        &lt;span class="nt"&gt;shifted&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="nt"&gt;se&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;identity&lt;/span&gt;
        &lt;span class="nt"&gt;scaled&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;
        &lt;span class="nt"&gt;reflectedabout&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="nt"&gt;shifted&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5u&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;upto&lt;/span&gt; &lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;transformed&lt;/span&gt; &lt;span class="nt"&gt;sw&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;nw&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ne&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;se&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;transformed&lt;/span&gt; &lt;span class="nt"&gt;j&lt;/span&gt; &lt;span class="nt"&gt;endfor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;endfor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nt"&gt;drawpath&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;drawpoints&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;enddef&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;(expr sidelength, n)&lt;/code&gt; 为 &lt;code&gt;hilbert&lt;/code&gt; 的参数列表，&lt;code&gt;expr&lt;/code&gt; 表示参数 &lt;code&gt;sidelength&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; 的类型皆为 MetaPost 的表达式。除了 &lt;code&gt;expr&lt;/code&gt; 之外，MetaPost 还支持 &lt;code&gt;text&lt;/code&gt; 和 &lt;code&gt;suffix&lt;/code&gt; 类型的参数。&lt;code&gt;text&lt;/code&gt; 类型的参数可以是任意 MetaPost 语句，但结尾必须为 &lt;code&gt;;&lt;/code&gt;。&lt;code&gt;suffix&lt;/code&gt; 表示含有后缀的变量，可将该类变量其理解为数组。需要注意，宏的参数，在其替换文本中不能再重新声明或赋值。&lt;/p&gt;
&lt;p&gt;现在调用 &lt;code&gt;hilbert&lt;/code&gt; 宏，便可将其展开为任意阶数的 Hilbert 曲线的构造及绘制语句。例如，在边长为 8cm 的正方形区域内构造并绘制 4 阶的 Hilbert 曲线，只需&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;hilbert(8cm, 4);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;条件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hilbert&lt;/code&gt; 宏有一个 Bug，它无法构造 1 阶 Hilbert 曲线——路径 &lt;code&gt;p&lt;/code&gt; 的初始状态。要修复这个 Bug，需要使用条件语句&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;if 条件:&lt;/span&gt;
&lt;span class="err"&gt;  语句;&lt;/span&gt;
&lt;span class="err"&gt;elseif 条件:&lt;/span&gt;
&lt;span class="err"&gt;  语句;&lt;/span&gt;
&lt;span class="c"&gt;else:&lt;/span&gt;
&lt;span class="c"&gt;  语句;&lt;/span&gt;
&lt;span class="err"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，&lt;code&gt;elseif&lt;/code&gt; 部分可选。&lt;/p&gt;
&lt;p&gt;可在构造 Hilbert 曲线的循环中，利用条件语句，将 &lt;code&gt;n = 1&lt;/code&gt; 视为特殊情况，在这种情况中不对 &lt;code&gt;p&lt;/code&gt; 进行变换，如此便可得到正确阶树的 Hilbert 曲线，亦即，将 &lt;code&gt;hilbert&lt;/code&gt; 宏的替换文本中的&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for i := 2 upto n:&lt;/span&gt;
&lt;span class="err"&gt;  p := p transformed sw for j := nw, ne, se: -- p transformed j endfor;&lt;/span&gt;
&lt;span class="err"&gt;endfor;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;if n &amp;gt; 1:&lt;/span&gt;
&lt;span class="err"&gt;  for i := 2 upto n:&lt;/span&gt;
&lt;span class="err"&gt;    p := p transformed sw for j := nw, ne, se: -- p transformed j endfor;&lt;/span&gt;
&lt;span class="err"&gt;  endfor;&lt;/span&gt;
&lt;span class="err"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如此，便修复了 &lt;code&gt;hilbert&lt;/code&gt; 宏在曲线阶数上的 Bug。&lt;/p&gt;
&lt;h2&gt;数据与绘图分离&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hilbert&lt;/code&gt; 宏的定义还存在一个问题，它做的事情太多了，不仅负责 Hilbert 曲线的构造，还负责曲线的绘制。做的事情多，并不意味着功能更强大。若需要对线条的颜色以及粗细虚实予以调整，需要修改 &lt;code&gt;hilbert&lt;/code&gt; 宏的定义。应对这些变化，最简单的方法是让 &lt;code&gt;hilbert&lt;/code&gt; 不负责绘图，只负责生成 Hilbert 曲线路径。为达到这一目的，需要用 &lt;code&gt;vardef&lt;/code&gt; 来定义 &lt;code&gt;hilbert&lt;/code&gt; 宏，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;vardef&lt;/span&gt; &lt;span class="n"&gt;hilbert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="n"&gt;sidelength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="n"&gt;numeric&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;sidelength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;se&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;sw&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;
        &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="n"&gt;reflectedabout&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;shifted&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;nw&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;
        &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="n"&gt;shifted&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;ne&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;
        &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="n"&gt;shifted&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;se&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;
        &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="n"&gt;reflectedabout&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;shifted&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;upto&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="n"&gt;sw&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;se&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;endfor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;endfor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="n"&gt;enddef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 &lt;code&gt;vardef&lt;/code&gt; 定义的宏，其替换文本的最后一句即为宏返回的结果。将 &lt;code&gt;p&lt;/code&gt; 作为 &lt;code&gt;hilbert&lt;/code&gt; 宏的替换文本的最后一句，便可使得 &lt;code&gt;hilbert&lt;/code&gt; 返回 Hilbert 曲线路径。&lt;/p&gt;
&lt;p&gt;若测试 &lt;code&gt;hilbert&lt;/code&gt; 宏能否满足需求，只需&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;path p; p := hilbert(8cm, 3);&lt;/span&gt;
&lt;span class="err"&gt;drawpath p; drawpoints p;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 &lt;code&gt;randomized&lt;/code&gt; 命令对 &lt;code&gt;p&lt;/code&gt; 作轻微的随机扰动，可使得 Hilbert 曲线具备一丝艺术气息，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;path p; p := hilbert(8cm, 3) randomized 5mm;&lt;/span&gt;
&lt;span class="err"&gt;drawpath p; drawpoints p;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/22.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;randomized&lt;/code&gt; 能够对出现在它之前的对象按指定幅度予以随机扰动。路径出现于 &lt;code&gt;randomized&lt;/code&gt; 之前，则路径中的所有节点的位置会被随机扰动。&lt;/p&gt;
&lt;h2&gt;变量的作用域&lt;/h2&gt;
&lt;p&gt;调用 &lt;code&gt;hilbert&lt;/code&gt; 宏，即使将其将其返回的路径赋予变量 &lt;code&gt;q&lt;/code&gt;，但依然可以用 &lt;code&gt;p&lt;/code&gt; 访问 &lt;code&gt;hilbert&lt;/code&gt; 所生成的路径：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;path q; q := hilbert(5cm, 3);&lt;/span&gt;
&lt;span class="err"&gt;drawpath p withcolor .625gren;&lt;/span&gt;
&lt;span class="err"&gt;drawpoints p withcolor .625red;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这意味着在 &lt;code&gt;hilbert&lt;/code&gt; 宏的定义中出现的变量 &lt;code&gt;p&lt;/code&gt;，在 &lt;code&gt;hilbert&lt;/code&gt; 宏的外部也是可见的。之所以出现这样的结果，原因在于 MetaPost 语言中，除了循环结构的变量之外，几乎所有的变量默认皆为全局变量。例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for i := 1 upto 5:&lt;/span&gt;
&lt;span class="err"&gt;    path p;&lt;/span&gt;
&lt;span class="err"&gt;    p := fullsquare scaled (i * 1cm) shifted (i * 1cm, 0);&lt;/span&gt;
&lt;span class="err"&gt;endfor;&lt;/span&gt;
&lt;span class="err"&gt;drawpath p;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，&lt;code&gt;p&lt;/code&gt; 为全局变量，但 &lt;code&gt;i&lt;/code&gt; 为局部变量。&lt;/p&gt;
&lt;p&gt;若要构造一些局部变量，需要使用 &lt;code&gt;begingroup ... endgroup&lt;/code&gt; 以及 &lt;code&gt;save&lt;/code&gt; 语句。例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;begingroup&lt;/span&gt;
&lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;numeric&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fullsquare&lt;/span&gt; &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;shifted&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;endgroup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;drawpath&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在绘制路径 &lt;code&gt;p&lt;/code&gt; 时，mpost 会报错，因为所绘制的路径并不存在。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;begingroup ... endgroup&lt;/code&gt; 构造了一个作用域，&lt;code&gt;save&lt;/code&gt; 则用于声明局部变量的名字。若该结构在宏的定义中使用，便可以对宏内所用的一些不想被外部所知的变量给予保护。&lt;/p&gt;
&lt;h2&gt;线性方程&lt;/h2&gt;
&lt;p&gt;mpost 具备线性方程求解的功能。基于这一功能，mpost 可动态确定变量类型。例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a = 1;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的 &lt;code&gt;=&lt;/code&gt; 并非赋值运算符。MetaPost 的赋值运算是上文中一直使用的 &lt;code&gt;:=&lt;/code&gt;。这里的 &lt;code&gt;=&lt;/code&gt; 表示方程或等式。在上文讲述条件结构的时候，已见识了它。mpost 会对这个方程进行求解，结果是变量 &lt;code&gt;a&lt;/code&gt; 的值为 1，因此这条语句等价于&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;numeric a;&lt;/span&gt;
&lt;span class="err"&gt;a := 1;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a + 2b = 5;&lt;/span&gt;
&lt;span class="err"&gt;3b = 7;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mpost 的求解结果为&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a = 0.33333;&lt;/span&gt;
&lt;span class="err"&gt;b = 2.33333;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a = (2cm, 3cm);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mpost 会报错，它认为一个数值与一个点无法构成方程，但是将变量名称写成以 &lt;code&gt;z&lt;/code&gt; 开头带有后缀的形式，便可构成方程，例如&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;z1 = (2cm, 3cm);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mpost 会将 &lt;code&gt;z1&lt;/code&gt; 视为一个点 &lt;code&gt;(x1, y1)&lt;/code&gt;，因此上述方程本质上是&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;(x1, y1) = (2cm, 3cm);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;反之，倘若 mpost 求解了以下方程&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;x1 = 3cm; &lt;/span&gt;
&lt;span class="err"&gt;y1 = 4cm;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就相当于定义了点 &lt;code&gt;z1 = (3cm, 4cm)&lt;/code&gt;。变量名称的后缀，可以是数字，也可以是数字 + 字母，还可以是 &lt;code&gt;.&lt;/code&gt; + 数字或字母，例如：&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;z3 = z1; z3r = z1; z.3 = z1; z.3r = z1;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除了可用于节省变量的声明之外，利用 mpost 求解线性方程的功能确定两条线段的交点也极为方便。例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;path p, q;&lt;/span&gt;
&lt;span class="err"&gt;z0 = (0, 0); z1 = (7cm, 5cm); z2 = (0, 3cm); z3 = (7cm, 3cm);&lt;/span&gt;
&lt;span class="err"&gt;p := z0 -- z1;&lt;/span&gt;
&lt;span class="err"&gt;q := z2 -- z3;&lt;/span&gt;
&lt;span class="err"&gt;z4 = whatever[z0, z1] = whatever[z2, z3];&lt;/span&gt;
&lt;span class="err"&gt;drawpath p; drawpath q;&lt;/span&gt;
&lt;span class="err"&gt;drawpoints z4;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/23.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;whatever[z0, z1]&lt;/code&gt; 表示 &lt;code&gt;z0 -- z1&lt;/code&gt; 上的任意一点。若写为 &lt;code&gt;0.5[z0, z1]&lt;/code&gt; 表示线段 &lt;code&gt;z0 -- z1&lt;/code&gt; 的中点。若写为 &lt;code&gt;1/3[z0, z1]&lt;/code&gt; 则表示 &lt;code&gt;z0 -- z1&lt;/code&gt; 距离 &lt;code&gt;z0&lt;/code&gt; 最近的三等分点。&lt;code&gt;[z0, z1]&lt;/code&gt; 这样的写法表示由线段 &lt;code&gt;z0 -- z1&lt;/code&gt; 构成的区间。两个数也能构成区间，例如 &lt;code&gt;[2, 4]&lt;/code&gt;，再例如 &lt;code&gt;0.5[2, 4]&lt;/code&gt; 的结果为 3。&lt;/p&gt;
&lt;h2&gt;MetaFun：MetaPost + ConTeXt&lt;/h2&gt;
&lt;p&gt;MetaPost 绘制的图形，通过 MetaFun 便可与 ConTeXt 的排版元素取得结合，从而显著增强 ConTeXt 的排版能力。例如，可以将一条 Hilbert 曲线作为文本框的背景。当然，只要能够绘制 Hilbert 曲线，将其保存为单页面文件，几乎任何一个功能健全的排版软件都能够以该图形作为文本框的背景，但是一旦图形被保存为文件，这就意味着图形失去了可变性，只适于作为特定尺寸的文本框的背景。&lt;/p&gt;
&lt;p&gt;假设将一条三阶 Hilbert 曲线以矢量图的形式保存为单页面文件 hilbert-3.pdf，那么在 ConTeXt 中可通过覆盖（Overlay）的方式将其作为文本框的背景图片，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\usemodule&lt;/span&gt;&lt;span class="na"&gt;[zhfonts]&lt;/span&gt;

&lt;span class="k"&gt;\defineoverlay&lt;/span&gt;&lt;span class="na"&gt;[hilbert][{\externalfigure[hilbert-3.pdf]&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;]
&lt;span class="k"&gt;\setupframed&lt;/span&gt;
  [background=hilbert,
    width=8cm,
    height=4cm,
    align=middle,
    location=lohi,
    align=&lt;span class="nb"&gt;{&lt;/span&gt;middle,lohi,broad&lt;span class="nb"&gt;}&lt;/span&gt;]

&lt;span class="k"&gt;\starttext&lt;/span&gt;
&lt;span class="k"&gt;\framed&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\bfd&lt;/span&gt; 天地一指也&lt;span class="k"&gt;\\&lt;/span&gt; 万物一马也&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\stoptext&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/24.png"&gt;&lt;/p&gt;
&lt;p&gt;若直接以 hilbert-3.pdf 文件所包含的图形作为文本框（即 &lt;code&gt;\framed&lt;/code&gt;）的背景，那么背景图片的尺寸默认是 hilbert-3.pdf 文件所包含的图形的尺寸。显然，这个尺寸太大了，背景图片超出了文本框。&lt;/p&gt;
&lt;p&gt;理想的文本框背景应该与文本框的尺寸相等。可通过变量（TeX 宏） &lt;code&gt;\overlaywidth&lt;/code&gt; 和 &lt;code&gt;\overlayheight&lt;/code&gt; 获得当前的文本框的宽度和高度，并基于这两个尺寸，对背景图片的尺寸进行调整，使之适应文本框，即&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\usemodule&lt;/span&gt;&lt;span class="na"&gt;[zhfonts]&lt;/span&gt;

&lt;span class="k"&gt;\defineoverlay&lt;/span&gt;
  [hilbert]
  [&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\externalfigure&lt;/span&gt;
      [hilbert-3.pdf]
      [width=&lt;span class="k"&gt;\overlaywidth&lt;/span&gt;, height=&lt;span class="k"&gt;\overlayheight&lt;/span&gt;]&lt;span class="nb"&gt;}&lt;/span&gt;]
&lt;span class="k"&gt;\setupframed&lt;/span&gt;
  [background=hilbert,
    width=8cm,
    height=4cm,
    align=middle,
    location=lohi,
    align=&lt;span class="nb"&gt;{&lt;/span&gt;middle,lohi,broad&lt;span class="nb"&gt;}&lt;/span&gt;]

&lt;span class="k"&gt;\starttext&lt;/span&gt;
&lt;span class="k"&gt;\framed&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\bfd&lt;/span&gt; 天地一指也&lt;span class="k"&gt;\\&lt;/span&gt; 万物一马也&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\stoptext&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/25.png"&gt;&lt;/p&gt;
&lt;p&gt;现在，背景图片被硬性地塞入了文本框，结果导致 Hilbert 曲线的线条变细，并且横向的线条被圧扁了。这正是以图形文件中的图形作为文本框背景的弊端所在，即背景图形中的线条失真。此外，经过缩放的 Hilbert 曲线，虽然恰好能够充满文本框，但实际上并不正确，因为 3 阶的 Hilbert 曲线是不可能恰好充满它所填充的空间。这些失真在 MetaPost 绘图过程中不会出现。当 MetaPost 通过 MetaFun 与 ConTeXt 取得融合时，ConTeXt 的排版元素便能够享有这一优势。&lt;/p&gt;
&lt;p&gt;为实现 MetaPost 与 ConTeXt 排版元素的融合，MetaFun 提供了 &lt;code&gt;uniqueMPgraphic&lt;/code&gt; 环境，在该环境内编写 MetaPost 程序，然后这个环境可以像插图那样在 ConTeXt 排版元素中使用。例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;\&lt;span class="n"&gt;startuniqueMPgraphic&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;hilbert&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;vardef&lt;/span&gt; &lt;span class="n"&gt;hilbert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="n"&gt;sidelength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;sidelength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;z1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;z2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;z3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;z4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;z2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;z3&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;z4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;se&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;sw&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;
        &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="n"&gt;reflectedabout&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;shifted&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;nw&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;
        &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="n"&gt;shifted&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;ne&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;
        &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="n"&gt;shifted&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;se&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;
        &lt;span class="n"&gt;scaled&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="n"&gt;reflectedabout&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;shifted&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;upto&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="n"&gt;sw&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;se&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;endfor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;endfor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="n"&gt;enddef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hilbert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OverlayWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;drawpath&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;yscaled&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OverlayHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;OverlayWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
\&lt;span class="n"&gt;stopuniqueMPgraphic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上述名为 &lt;code&gt;hilbert-3&lt;/code&gt; 的 &lt;code&gt;uniqueMPgraphic&lt;/code&gt; 环境中，对 &lt;code&gt;hilbert&lt;/code&gt; 宏所生成的 Hibert 曲线，根据变量 &lt;code&gt;OverlayWitdh&lt;/code&gt; 和 &lt;code&gt;OverlayHeight&lt;/code&gt; 的值给出了适应性的缩放，亦即在 &lt;code&gt;uniqueMPgraphic&lt;/code&gt; 环境中，MetaPost 程序可以共享 ConTeXt 排版元素的一些变量。&lt;/p&gt;
&lt;p&gt;若将上述 &lt;code&gt;uniqueMPgraphic&lt;/code&gt; 环境作为文本框的背景图片，只需&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\defineoverlay&lt;/span&gt;&lt;span class="na"&gt;[hilbert][\uniqueMPgraphic{hilbert-3}]&lt;/span&gt;
&lt;span class="k"&gt;\setupframed&lt;/span&gt;
  [background=hilbert,
    width=8cm,
    height=4cm,
    align=middle,
    location=lohi,
    align=&lt;span class="nb"&gt;{&lt;/span&gt;middle,lohi,broad&lt;span class="nb"&gt;}&lt;/span&gt;]

&lt;span class="k"&gt;\starttext&lt;/span&gt;
&lt;span class="k"&gt;\framed&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\bfd&lt;/span&gt; 天地一指也&lt;span class="k"&gt;\\&lt;/span&gt; 万物一马也&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\stoptext&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果可得&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/metafun/26.png"&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;\framed&lt;/code&gt; 的 &lt;code&gt;frame=off&lt;/code&gt; 可以隐藏文本框的边框，这样便可得到以 3 阶 Hilbert 曲线作为背景的文本框，而且背景的尺寸能够适应文本框的尺寸的变化。例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\setupframed&lt;/span&gt;&lt;span class="na"&gt;[frame=off]&lt;/span&gt;
&lt;span class="k"&gt;\midaligned&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\framed&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\bfd&lt;/span&gt; 天地一指也&lt;span class="k"&gt;\\&lt;/span&gt; 万物一马也&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;\blank&lt;/span&gt;&lt;span class="na"&gt;[1cm]&lt;/span&gt;
&lt;span class="k"&gt;\midaligned&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\framed&lt;/span&gt;&lt;span class="na"&gt;[width=12cm, height=3cm]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\bfd&lt;/span&gt; 天地一指也&lt;span class="k"&gt;\\&lt;/span&gt; 万物一马也&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/metafun/27.png"&gt;&lt;/p&gt;
&lt;p&gt;以上仅以文本框为例，简单介绍了 ConTeXt 与 MetaPost 的结合。事实上，对于 ConTeXt 的任一排版元素，只要它具备 &lt;code&gt;background&lt;/code&gt; 选项，便可以利用 MetaPost 图形为其构建背景图形。即使一些排版元素不具备 &lt;code&gt;background&lt;/code&gt; 选项，但是只要它们具备 &lt;code&gt;command&lt;/code&gt; 选项，便可以通过嵌入文本框的方式与 MetaPost 图形结合。&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;有关 MetaFun 更为详细的介绍见荷兰人 Hans Hagen 所写的 MetaFun 手册 &lt;strong&gt;&lt;sup&gt;&lt;a href="/images/metafun/10.png"&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; 。Hans Hagen 即是 ConTeXt 的开发者，也是 MetaFun 的开发者。&lt;/p&gt;
&lt;p&gt;对于以编程的方式绘制精确二维矢量图这种任务而言，MetaPost 是一种功能强大的编程语言。不过，适合这一任务的功能强大的编程语言并不少，譬如 LaTeX 的小伙伴 pgf/tikz，擅长绘制三维矢量图的 Asymptote，擅长绘制图表的 gnuplot、MathGL 等。与这些同类相比，MetaPost 胜出之处在于语法的优雅。&lt;/p&gt;
&lt;p&gt;MetaPost 语法的优雅一方面来自于它的宏编程特质。像每一种优雅都来自刻苦地训练一样，MetaPost 的优雅也并非朝发夕至之工可致。在编写这篇文章的一些简单示例的过程中，mpost 崩溃次数难以历数，而且它的每次崩溃几乎都会给出冗长的出错信息，需要像侦探一样从中查出端倪。因此，MetaPost 的优雅只是会向那些绘制精确矢量图这种任务乐此不疲的人绽放。另一方面，MetaPost MetaPost 绘图命令与英文的语法相近，即「谓语 + 宾语 + 定语 + 状语」的形式，例如，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;主语 I（省略） + 谓语 draw + 路径 p + 定语 scaled 0.5 + 状语 withcolor .8red;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MetaFun 的出现，为 MetaPost 在排版领域开辟了用武之地。在文档排版方面，利用 MetaPost 所绘制的精确的矢量图形为一些排版元素构造背景，使得文档的排版更为精美。&lt;/p&gt;
&lt;p&gt;绘图是一门艺术。排版也是一门艺术。艺术的重要性在于它能够开拓人类的思维空间。使用 MetaPost 绘图，使用 ConTeXt 对文档进行排版则是技术。艺术的空间需要借助技术去探索或开拓。MetaFun 贯通了 MetaPost 和 ConTeXt，意味着具备了探索或开拓计算机绘图与排版相融合的艺术空间的一种工具。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;引用的文献：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1]  &lt;a href="https://segmentfault.com/a/1190000003779240"&gt;序幕有些长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]  &lt;a href="https://segmentfault.com/a/1190000003786283"&gt;睦邻友好的 ConTeXt Standalone&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3]  &lt;a href="https://segmentfault.com/a/1190000003790820"&gt;先写作，后排版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4]  &lt;a href="https://segmentfault.com/a/1190000003795931"&gt;ConTeXt MkIV 中文支持&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5]  &lt;a href="http://segmentfault.com/a/1190000003797764"&gt;文稿的物理结构&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6]  &lt;a href="http://segmentfault.com/a/1190000003798231"&gt;文稿的逻辑结构&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7]  &lt;a href="http://segmentfault.com/a/1190000003803997"&gt;页面布局&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[8]  &lt;a href="http://www.pragma-ade.nl/general/manuals/ma-cb-en.pdf"&gt;ConTeXt Mark IV an excursion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[9]  &lt;a href="http://pmrb.free.fr/contextref.pdf"&gt;ConTeXt Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[10]  &lt;a href="http://www.pragma-ade.com/general/manuals/metafun-p.pdf"&gt;MetaFun Manual&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>ConTeXt MkIV</category><category>MetaFun</category><guid>/posts/metafun.html</guid><pubDate>Mon, 29 Oct 2018 10:10:38 GMT</pubDate></item></channel></rss>